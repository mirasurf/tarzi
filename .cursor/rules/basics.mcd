---
description:
globs:
alwaysApply: true
---

You're working on **Tarzi**—a rust-native lite search for AI applications.

## GENERAL CONSIDERATIONS

- We want to build a Rust project that is still runnable after 10 years. Keep this as the basic rule to manage build toolchain.
- After generation, always make sure the code format and linting are performed well.
- Always DO NOT change unrelated parts beyond user requirements.
- Always make sure the existing unittests and integration tests are passed.
- Always perfer modularized design for each module.
- Always declared contants value modules to contain magic values. DO NOT treat error messages as constants.
- For Makefile, always classify subcommands into category and unify subcommands pattern: make foo (to run foo for Rust), make foo-python (to run foo for python), make foo-all (to run foo for Rust and Python)

## IMPL. CONSIDERATIONS OF RUST

- **Minimize external dependencies**: Use only well-maintained, stable crates with a strong community or institutional backing. Prefer the Rust standard library for core functionality like file I/O, threading, and networking.
- **Audit dependencies**: Use cargo tree or cargo audit to review dependencies and their transitive dependencies. Avoid crates with excessive dependencies or those that haven’t been updated recently.
- **Use stable Rust features**: Avoid experimental or nightly-only features (e.g., unstable APIs or #![feature(...)]). Stick to the stable Rust release channel to ensure compatibility with future Rust versions.
- **Lock Rust Version and Toolchain**: For example, pin the Rust toolchain, document toolchain installation, consider vendoring the toolchain with `cargo vendor`, and regularly update vendored dependencies
- **Write Robust, Portable Code**: Write code that avoids platform-specific assumptions, avoids external system dependencies. For platform-specific code, use #[cfg(...)] to handle differences gracefully.
- Always use `cargo fmt` and `cargo clippy` to format and lint code.

## IMPL. CONSIDERATIONS OF PYTHON

- Always manage python project with `pyproject.toml`