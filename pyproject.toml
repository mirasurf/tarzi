[build-system]
requires = ["maturin>=1.0,<2.0"]
build-backend = "maturin"

[project]
name = "tarzi"
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Rust",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: Indexing/Search",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["web-scraping", "search-engine", "ai-tools", "rust", "browser-automation"]
version = "0.0.11"
description = "Rust-native lite search for AI applications"
readme = "README.md"
license = {text = "Apache-2.0"}
authors = [
    {name = "xmingc", email = "chenxm35@gmail.com"},
]
maintainers = [
    {name = "xmingc", email = "chenxm35@gmail.com"},
]

[project.urls]
Homepage = "https://github.com/mirasurf/tarzi.rs"
Documentation = "https://tarzi.readthedocs.io/"
Repository = "https://github.com/mirasurf/tarzi.rs"
"Bug Tracker" = "https://github.com/mirasurf/tarzi.rs/issues"

[project.optional-dependencies]
dev = [
    "maturin>=1.0,<2.0",
    "pytest>=6.0",
    "pytest-cov>=4.0",
    "black>=22.0",
    "ruff>=0.1.0",
    "isort>=5.0",
    "autoflake>=2.0",
    "twine>=4.0.0",
    "build>=0.10.0",
]
test = [
    "pytest>=6.0",
    "pytest-cov>=4.0",
    "pytest-asyncio>=0.20.0",
]
docs = [
    "sphinx>=6.0.0",
    "sphinx-copybutton>=0.5.2",
    "myst-parser>=2.0.0",
    "sphinx-tabs>=3.4.1",
    "sphinx-design>=0.5.0",
    "furo>=2023.9.10",
    "sphinx-autoapi>=3.0.0",
]

[tool.maturin]
features = ["pyo3/extension-module"]
module-name = "tarzi"
strip = true
bindings = "pyo3"
python-source = "python"

[project.scripts]
tarzi = "tarzi.__main__:main"

[tool.pytest.ini_options]
testpaths = ["tests/python"]
addopts = ["-v", "--tb=short"]
markers = [
    "unit: Unit tests that don't require external dependencies",
    "integration: Integration tests that require external services",
    "browser: Tests that require browser automation tools",
    "slow: Tests that are slow to run",
    "network: Tests that require network access",
    "api: Tests that require API access",
]
filterwarnings = ["ignore::DeprecationWarning"]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["tarzi"]
omit = ["*/tests/*"]
branch = true

[tool.coverage.report]
exclude_lines = ["pragma: no cover", "def __repr__", "raise NotImplementedError"]
show_missing = true

[tool.black]
line-length = 120
target-version = ["py310"]

[tool.ruff]
line-length = 120
target-version = "py310"

[tool.ruff.lint]
select = ["E", "W", "F", "I", "B"]
ignore = ["E501", "B008"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.isort]
profile = "black"
line_length = 120

[tool.autoflake]
remove-all-unused-imports = true
remove-unused-variables = true 