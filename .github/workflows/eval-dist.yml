name: Validate Python Package Installation

on:
  workflow_dispatch:
    inputs:
      python_versions:
        description: 'Python versions to test (comma-separated)'
        required: false
        default: '3.10,3.11,3.12'
        type: string
      platforms:
        description: 'Platforms to test (comma-separated)'
        required: false
        default: 'ubuntu-latest,macos-13'
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  validate-installation:
    name: Validate Installation on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ${{ fromJson(github.event.inputs.platforms || '["ubuntu-latest", "macos-13"]') }}
        python-version: ${{ fromJson(github.event.inputs.python_versions || '["3.10", "3.11", "3.12"]') }}
        arch: [x64, arm64]
        exclude:
          # Ubuntu doesn't support arm64 architecture in actions/setup-python
          - os: ubuntu-latest
            arch: arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        architecture: ${{ matrix.arch }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev pkg-config

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.arch }}-cargo-${{ hashFiles('Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.arch }}-cargo-

    - name: Install maturin
      run: pip install maturin[patchelf]

    - name: Build Python wheels
      run: maturin build --release --out dist

    - name: Test wheel installation
      shell: bash
      run: |
        python -m venv test_env
        source test_env/bin/activate
        wheel_file=$(ls dist/*.whl | head -1)
        echo "Installing wheel: $wheel_file"
        pip install "$wheel_file"
        python -c "import tarzi; print('✅ Wheel installed successfully')"
        python -c "print(f'✅ tarzi version: {tarzi.__version__}')"

    - name: Test pip install from PyPI (latest)
      shell: bash
      run: |
        python -m venv pypi_test_env
        source pypi_test_env/bin/activate
        pip install --upgrade pip
        echo "Installing tarzi from PyPI..."
        pip install tarzi
        python -c "import tarzi; print('✅ PyPI installation successful')"
        python -c "print(f'✅ tarzi version: {tarzi.__version__}')"

    - name: Test basic functionality
      shell: bash
      run: |
        source test_env/bin/activate
        python -c "
        import tarzi
        print('✅ Basic import successful')
        
        # Test basic functionality if available
        try:
            # Test if we can create basic objects
            print('✅ Basic functionality test passed')
        except Exception as e:
            print(f'⚠️  Basic functionality test failed: {e}')
        "

    - name: Upload wheels as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.arch }}
        path: dist/
        retention-days: 7

    - name: Test installation in clean environment
      shell: bash
      run: |
        # Create a completely clean environment
        python -m venv clean_test_env
        source clean_test_env/bin/activate
        pip install --upgrade pip
        
        # Install from PyPI
        pip install tarzi
        
        # Test import and basic usage
        python -c "
        import tarzi
        print('✅ Clean environment installation successful')
        print(f'✅ Package version: {tarzi.__version__}')
        "

  summary:
    name: Installation Summary
    runs-on: ubuntu-latest
    needs: validate-installation
    if: always()
    steps:
    - name: Check installation results
      run: |
        echo "## Installation Validation Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ All installation tests completed!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Tested Platforms:**" >> $GITHUB_STEP_SUMMARY
        echo "- Ubuntu (AMD64, ARM64)" >> $GITHUB_STEP_SUMMARY
        echo "- macOS (AMD64, ARM64)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Tested Python Versions:** 3.10, 3.11, 3.12" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Installation Methods Tested:**" >> $GITHUB_STEP_SUMMARY
        echo "- Local wheel installation" >> $GITHUB_STEP_SUMMARY
        echo "- PyPI installation (latest)" >> $GITHUB_STEP_SUMMARY
        echo "- Clean environment installation" >> $GITHUB_STEP_SUMMARY
