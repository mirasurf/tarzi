name: Publish Packages

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to publish to'
        required: true
        default: 'testpypi'
        type: choice
        options:
        - testpypi
        - pypi
      dry_run:
        description: 'Dry run - only build, no publishing'
        required: false
        default: false
        type: boolean

jobs:
  build-wheels:
    name: Build wheels for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # macos-13 is an intel runner, macos-14 is apple silicon
        os: [ubuntu-latest, ubuntu-24.04-arm, windows-latest, windows-11-arm, macos-13, macos-14]
    steps:
    - uses: actions/checkout@v5
    - name: Install Python
      uses: actions/setup-python@v5

    - name: Set up uv
      uses: astral-sh/setup-uv@v3
    - name: Install python dependencies
      run: |
        make install-uv-env
        uv run pip install cibuildwheel==2.21.2

    - name: Build wheels
      uses: pypa/cibuildwheel@v3.1.4
      env:
        CIBW_SOME_OPTION: value
        CIBW_BEFORE_ALL: |
          # Install Rust
          echo "=== Installing Rust ==="
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable
          source $HOME/.cargo/env
          export PATH="$HOME/.cargo/bin:$PATH"
          # Verify Rust installation
          echo "=== Rust Installation Check ==="
          cargo --version
          rustc --version
          which cargo
          which rustc
      with:
        package-dir: .
        output-dir: wheelhouse
        config-file: "{package}/pyproject.toml"

    - uses: actions/upload-artifact@v4
      with:
        name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
        path: ./wheelhouse/*.whl

  publish-python:
    name: Publish Python Package
    runs-on: ubuntu-latest
    needs: [build-macos-wheels, build-linux-wheels]
    if: >
      github.event_name == 'release' || 
      (github.event_name == 'workflow_dispatch' && (!github.event.inputs.dry_run || github.event.inputs.dry_run == 'false'))
    environment: ${{ github.event.inputs.environment || 'pypi' }}
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    steps:
    - uses: actions/checkout@v4
    - name: Download all wheels
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Collect wheels
      run: |
        mkdir -p dist
        find artifacts -name "*.whl" -exec cp {} dist/ \;
        find artifacts -name "*.tar.gz" -exec cp {} dist/ \;
        ls -la dist/
    
    - name: Publish to TestPyPI
      if: github.event.inputs.environment == 'testpypi' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'testpypi')
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
    
    - name: Publish to PyPI
      if: github.event_name == 'release' && github.event.action == 'published'
      uses: pypa/gh-action-pypi-publish@release/v1

  publish-rust:
    name: Publish Rust Crate
    runs-on: ubuntu-latest
    if: >
      github.event_name == 'release' || 
      (github.event_name == 'workflow_dispatch' && (!github.event.inputs.dry_run || github.event.inputs.dry_run == 'false'))
    steps:
    - uses: actions/checkout@v4
    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
    - name: Publish to crates.io
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      run: cargo publish

  dry-run-summary:
    name: Dry Run Summary
    runs-on: ubuntu-latest
    needs: [build-macos-wheels, build-linux-wheels]
    if: ${{ github.event.inputs.dry_run == 'true' }}
    steps:
    - uses: actions/checkout@v4
    - name: Download all wheels
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    - name: Show built artifacts
      run: |
        echo "=== DRY RUN SUMMARY ==="
        echo "Built wheels and source distributions:"
        find artifacts -name "*.whl" -o -name "*.tar.gz" | sort
        echo ""
        echo "Total artifacts:"
        find artifacts -name "*.whl" -o -name "*.tar.gz" | wc -l
        echo ""
        echo "Wheel types:"
        echo "- manylinux wheels: Compatible with most Linux distributions"
        echo "- macOS wheels: Compatible with macOS Intel and Apple Silicon"
        echo "- Source distributions: Universal compatibility"
        echo ""
        echo "This was a dry run - no packages were published."
        echo "To publish, run the workflow again with dry_run=false" 