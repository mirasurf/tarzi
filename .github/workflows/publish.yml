name: Publish Packages

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to publish to'
        required: true
        default: 'testpypi'
        type: choice
        options:
        - testpypi
        - pypi
      dry_run:
        description: 'Dry run - only build, no publishing'
        required: false
        default: false
        type: boolean

jobs:
  build-macos-wheels:
    name: Build wheels on ${{ matrix.os }} (${{ matrix.arch }}) for Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        os: [macos-latest]
        python-version: ['3.10', '3.11', '3.12']
        arch: [x64, arm64]
        include:
          # macOS runners - use macos-13 for x64, macos-latest for arm64
          - os: macos-latest
            arch: x64
            runner: macos-13
          - os: macos-latest
            arch: arm64
            runner: macos-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }} (${{ matrix.arch }})
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        architecture: ${{ matrix.arch }}

    - name: Set up uv
      uses: astral-sh/setup-uv@v3
    - name: Install python dependencies
      run: make install-uv-env

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ matrix.runner }}-${{ matrix.arch }}-cargo-${{ hashFiles('Cargo.lock') }}
        restore-keys: |
          ${{ matrix.runner }}-${{ matrix.arch }}-cargo-
    
    - name: Build wheels
      run: uv run maturin build --release --out dist --interpreter python${{ matrix.python-version }}
    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}-${{ matrix.arch }}-py${{ matrix.python-version }}
        path: dist

  build-linux-wheels:
    name: Build wheels for Python ${{ matrix.python-version }}-${{ matrix.arch }}
    runs-on: ${{ matrix.arch == 'aarch64' && 'ubuntu-24.04-arm' || 'ubuntu-latest' }}
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
        arch: [x86_64, aarch64]
        os: [musllinux]
    steps:
    - uses: actions/checkout@v4
    - name: Install Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up uv
      uses: astral-sh/setup-uv@v3
    - name: Install python dependencies
      run: |
        make install-uv-env
        uv run pip install cibuildwheel==2.21.2

    - name: Build wheels
      run: uv run python -m cibuildwheel --output-dir wheelhouse
      env:
        CIBW_BUILD: cp${{ matrix.python-version == '3.10' && '310' || matrix.python-version == '3.11' && '311' || '312' }}-*
        CIBW_ARCHS: ${{ matrix.arch }}
        CIBW_MUSLLINUX_X86_64_IMAGE: musllinux_1_1
        CIBW_MUSLLINUX_AARCH64_IMAGE: musllinux_1_1
        CIBW_ENVIRONMENT: >
          OPENSSL_ROOT_DIR=/usr
          OPENSSL_DIR=/usr
          OPENSSL_LIB_DIR=/usr/lib64
          OPENSSL_INCLUDE_DIR=/usr/include/openssl
          PKG_CONFIG_PATH=/usr/lib64/pkgconfig:/usr/lib/pkgconfig
          RUSTFLAGS="-C target-feature=-crt-static"
          PATH=/root/.cargo/bin:$PATH
          CARGO_HOME=/root/.cargo
        CIBW_BEFORE_ALL: |
          echo "=== Installing OpenSSL dependencies (musllinux) ==="
          apk update
          apk add openssl-dev
          apk add openssl-libs-static
          # Install Rust
          echo "=== Installing Rust ==="
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable
          source $HOME/.cargo/env
          export PATH="$HOME/.cargo/bin:$PATH"
          # Verify Rust installation
          echo "=== Rust Installation Check ==="
          cargo --version
          rustc --version
          which cargo
          which rustc

    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.os }}-wheels-${{ matrix.arch }}-py${{ matrix.python-version }}
        path: wheelhouse/*.whl

  publish-python:
    name: Publish Python Package
    runs-on: ubuntu-latest
    needs: [build-macos-wheels, build-linux-wheels]
    if: >
      github.event_name == 'release' || 
      (github.event_name == 'workflow_dispatch' && (!github.event.inputs.dry_run || github.event.inputs.dry_run == 'false'))
    environment: ${{ github.event.inputs.environment || 'pypi' }}
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    steps:
    - uses: actions/checkout@v4
    - name: Download all wheels
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Collect wheels
      run: |
        mkdir -p dist
        find artifacts -name "*.whl" -exec cp {} dist/ \;
        find artifacts -name "*.tar.gz" -exec cp {} dist/ \;
        ls -la dist/
    
    - name: Publish to TestPyPI
      if: github.event.inputs.environment == 'testpypi' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'testpypi')
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
    
    - name: Publish to PyPI
      if: github.event_name == 'release' && github.event.action == 'published'
      uses: pypa/gh-action-pypi-publish@release/v1

  publish-rust:
    name: Publish Rust Crate
    runs-on: ubuntu-latest
    if: >
      github.event_name == 'release' || 
      (github.event_name == 'workflow_dispatch' && (!github.event.inputs.dry_run || github.event.inputs.dry_run == 'false'))
    steps:
    - uses: actions/checkout@v4
    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
    - name: Publish to crates.io
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      run: cargo publish

  dry-run-summary:
    name: Dry Run Summary
    runs-on: ubuntu-latest
    needs: [build-macos-wheels, build-linux-wheels]
    if: ${{ github.event.inputs.dry_run == 'true' }}
    steps:
    - uses: actions/checkout@v4
    - name: Download all wheels
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    - name: Show built artifacts
      run: |
        echo "=== DRY RUN SUMMARY ==="
        echo "Built wheels and source distributions:"
        find artifacts -name "*.whl" -o -name "*.tar.gz" | sort
        echo ""
        echo "Total artifacts:"
        find artifacts -name "*.whl" -o -name "*.tar.gz" | wc -l
        echo ""
        echo "Wheel types:"
        echo "- manylinux wheels: Compatible with most Linux distributions"
        echo "- macOS wheels: Compatible with macOS Intel and Apple Silicon"
        echo "- Source distributions: Universal compatibility"
        echo ""
        echo "This was a dry run - no packages were published."
        echo "To publish, run the workflow again with dry_run=false" 