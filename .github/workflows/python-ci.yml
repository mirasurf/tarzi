name: Python CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  lint:
    name: Lint Python Code
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black ruff isort autoflake

    - name: Check Python formatting with black
      run: black --check tarzi/examples tarzi/python

    - name: Check import sorting with isort
      run: isort --check-only tarzi/examples tarzi/python

    - name: Lint with ruff
      run: ruff check tarzi/examples tarzi/python

  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.10']
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          tarzi/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('tarzi/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Install maturin
      run: pip install maturin[patchelf]

    - name: Create virtual environment
      run: python -m venv .venv

    - name: Install test dependencies
      shell: bash
      run: |
        source .venv/bin/activate
        pip install --upgrade pip
        pip install pytest pytest-cov pytest-mock pytest-asyncio

    - name: Build Python extension
      shell: bash
      run: |
        source .venv/bin/activate
        cd tarzi
        maturin develop --release

    - name: Run Python unit tests only
      shell: bash
      run: |
        source .venv/bin/activate
        cd tarzi
        make test-unit
      continue-on-error: true

    - name: Run all Python tests (unit + integration)
      shell: bash
      run: |
        source .venv/bin/activate
        cd tarzi
        make test
      continue-on-error: true

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v3
      with:
        file: tarzi/tests/python/coverage.xml
        flags: python
        name: python-coverage

  build-wheels:
    name: Build Python wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.10']
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install maturin
      run: pip install maturin[patchelf]

    - name: Build wheels
      run: cd tarzi && maturin build --release --out dist

    - name: Test wheel installation
      shell: bash
      run: |
        python -m venv test_env
        source test_env/bin/activate
        wheel_file=$(ls tarzi/dist/*.whl | head -1)
        pip install "$wheel_file"
        python -c "import tarzi; print('Wheel installed successfully')"

    - name: Upload wheels as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}
        path: tarzi/dist/

  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Create virtual environment and install dependencies
      shell: bash
      run: |
        python -m venv .venv
        source .venv/bin/activate
        pip install --upgrade pip
        pip install -r docs/requirements.txt
        pip install maturin

    - name: Build Python extension for docs
      shell: bash
      run: |
        source .venv/bin/activate
        cd tarzi
        maturin develop --release

    - name: Build documentation
      shell: bash
      run: |
        source .venv/bin/activate
        cd docs
        make html

    - name: Upload documentation
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/_build/html/
