name: Python CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      matrix:
        os: [ubuntu-latest, macos-13]  # Use macos-13 for better compatibility
        python-version: ['3.10']
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev pkg-config
        
    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        # Update Homebrew and install dependencies with retry logic
        echo "üç∫ Updating Homebrew..."
        brew update || (echo "‚ö†Ô∏è Homebrew update failed, continuing..." && true)
        
        echo "üì¶ Installing system dependencies..."
        for pkg in openssl pkg-config autoconf automake libtool; do
          echo "Installing $pkg..."
          brew install $pkg || (echo "‚ö†Ô∏è Failed to install $pkg, retrying..." && brew install $pkg)
        done
        
        # Set up OpenSSL environment variables for macOS
        OPENSSL_PREFIX=$(brew --prefix openssl)
        echo "OPENSSL_DIR=$OPENSSL_PREFIX" >> $GITHUB_ENV
        echo "OPENSSL_LIB_DIR=$OPENSSL_PREFIX/lib" >> $GITHUB_ENV
        echo "OPENSSL_INCLUDE_DIR=$OPENSSL_PREFIX/include" >> $GITHUB_ENV
        echo "PKG_CONFIG_PATH=$OPENSSL_PREFIX/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
        
        # Verify OpenSSL installation
        echo "‚úÖ OpenSSL installed at: $OPENSSL_PREFIX"
        echo "‚úÖ OpenSSL version: $(openssl version)"
        echo "üìã OpenSSL library files:"
        ls -la "$OPENSSL_PREFIX/lib" | head -5

    - name: Set up uv
      uses: astral-sh/setup-uv@v3

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Install uv environment and maturin
      run: |
        echo "üîß Setting up uv environment..."
        uv --version
        echo "üì¶ Installing dependencies..."
        uv sync --extra dev || uv sync
        echo "üî® Installing maturin..."
        uv pip install maturin
        echo "‚úÖ Environment setup complete"
        
        # Debug information for macOS
        if [ "$RUNNER_OS" == "macOS" ]; then
          echo "üçé macOS Debug Information:"
          echo "OPENSSL_DIR: $OPENSSL_DIR"
          echo "PKG_CONFIG_PATH: $PKG_CONFIG_PATH"
          pkg-config --cflags --libs openssl || echo "‚ö†Ô∏è pkg-config openssl check failed"
        fi
        
    - name: Build Python extension (develop)
      run: uv run maturin develop --release
      env:
        # Ensure OpenSSL environment variables are available for maturin on macOS
        OPENSSL_DIR: ${{ runner.os == 'macOS' && env.OPENSSL_DIR || '' }}
        OPENSSL_LIB_DIR: ${{ runner.os == 'macOS' && env.OPENSSL_LIB_DIR || '' }}
        OPENSSL_INCLUDE_DIR: ${{ runner.os == 'macOS' && env.OPENSSL_INCLUDE_DIR || '' }}

    - name: Run Python unit tests
      run: make test-unit-python

  build-wheels:
    name: Build Python wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      matrix:
        os: [ubuntu-latest, macos-13]  # Use macos-13 for better compatibility
        python-version: ['3.10']
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev pkg-config
        
    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        # Update Homebrew and install dependencies with retry logic
        echo "üç∫ Updating Homebrew..."
        brew update || (echo "‚ö†Ô∏è Homebrew update failed, continuing..." && true)
        
        echo "üì¶ Installing system dependencies..."
        for pkg in openssl pkg-config autoconf automake libtool; do
          echo "Installing $pkg..."
          brew install $pkg || (echo "‚ö†Ô∏è Failed to install $pkg, retrying..." && brew install $pkg)
        done
        
        # Set up OpenSSL environment variables for macOS
        OPENSSL_PREFIX=$(brew --prefix openssl)
        echo "OPENSSL_DIR=$OPENSSL_PREFIX" >> $GITHUB_ENV
        echo "OPENSSL_LIB_DIR=$OPENSSL_PREFIX/lib" >> $GITHUB_ENV
        echo "OPENSSL_INCLUDE_DIR=$OPENSSL_PREFIX/include" >> $GITHUB_ENV
        echo "PKG_CONFIG_PATH=$OPENSSL_PREFIX/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
        
        # Verify OpenSSL installation
        echo "‚úÖ OpenSSL installed at: $OPENSSL_PREFIX"
        echo "‚úÖ OpenSSL version: $(openssl version)"
        echo "üìã OpenSSL library files:"
        ls -la "$OPENSSL_PREFIX/lib" | head -5

    - name: Set up uv
      uses: astral-sh/setup-uv@v3

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable

    - name: Install uv environment and maturin
      run: |
        echo "üîß Setting up uv environment..."
        uv --version
        echo "üì¶ Installing dependencies..."
        uv sync --extra dev || uv sync
        echo "üî® Installing maturin..."
        uv pip install maturin
        echo "‚úÖ Environment setup complete"
        
        # Debug information for macOS
        if [ "$RUNNER_OS" == "macOS" ]; then
          echo "üçé macOS Debug Information:"
          echo "OPENSSL_DIR: $OPENSSL_DIR"
          echo "PKG_CONFIG_PATH: $PKG_CONFIG_PATH"
          pkg-config --cflags --libs openssl || echo "‚ö†Ô∏è pkg-config openssl check failed"
        fi

    - name: Build wheels
      run: uv run maturin build --release --out dist
      env:
        # Ensure OpenSSL environment variables are available for maturin on macOS
        OPENSSL_DIR: ${{ runner.os == 'macOS' && env.OPENSSL_DIR || '' }}
        OPENSSL_LIB_DIR: ${{ runner.os == 'macOS' && env.OPENSSL_LIB_DIR || '' }}
        OPENSSL_INCLUDE_DIR: ${{ runner.os == 'macOS' && env.OPENSSL_INCLUDE_DIR || '' }}

    - name: Test wheel installation
      shell: bash
      run: |
        python -m venv test_env
        source test_env/bin/activate
        pip install --upgrade pip
        wheel_file=$(ls dist/*.whl | head -1)
        echo "Installing wheel: $wheel_file"
        pip install "$wheel_file"
        python -c "import tarzi; print('‚úÖ Wheel installed successfully')"
        # Test basic functionality
        python -c "
        import tarzi
        print('‚úÖ Basic import test passed')
        print(f'‚úÖ tarzi version: {tarzi.__version__}')
        "

    - name: Upload wheels as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}
        path: dist/

  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        
    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev pkg-config
        
    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install openssl pkg-config

    - name: Set up uv
      uses: astral-sh/setup-uv@v3

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable

    - name: Create virtual environment and install dependencies
      shell: bash
      run: |
        uv --version
        uv sync --extra dev || uv sync
        uv pip install maturin
        uv pip install -r docs/requirements.txt

    - name: Build Python extension for docs
      shell: bash
      run: |
        uv run maturin develop --release
      env:
        # Ensure OpenSSL environment variables are available for maturin on macOS
        OPENSSL_DIR: ${{ runner.os == 'macOS' && env.OPENSSL_DIR || '' }}
        OPENSSL_LIB_DIR: ${{ runner.os == 'macOS' && env.OPENSSL_LIB_DIR || '' }}
        OPENSSL_INCLUDE_DIR: ${{ runner.os == 'macOS' && env.OPENSSL_INCLUDE_DIR || '' }}

    - name: Build documentation
      shell: bash
      run: |
        cd docs
        make html

    - name: Upload documentation
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/_build/html/
