name: Python CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.10']
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev pkg-config
        
    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install openssl pkg-config

    - name: Set up uv
      uses: astral-sh/setup-uv@v3

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable

    - name: Install build tools on macOS
      if: runner.os == 'macOS'
      run: |
        brew install autoconf automake libtool openssl pkg-config

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Install uv environment and maturin
      run: |
        uv --version
        uv sync --extra dev || uv sync
        uv pip install maturin
        
    - name: Build Python extension (develop)
      run: uv run maturin develop --release

    - name: Run Python unit tests
      run: make test-unit-python

  build-wheels:
    name: Build Python wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.10']
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev pkg-config
        
    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install openssl pkg-config

    - name: Set up uv
      uses: astral-sh/setup-uv@v3

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable

    - name: Install build tools on macOS
      if: runner.os == 'macOS'
      run: |
        brew install autoconf automake libtool openssl pkg-config

    - name: Install uv environment and maturin
      run: |
        uv --version
        uv sync --extra dev || uv sync
        uv pip install maturin

    - name: Build wheels
      run: uv run maturin build --release --out dist

    - name: Test wheel installation
      shell: bash
      run: |
        python -m venv test_env
        source test_env/bin/activate
        wheel_file=$(ls dist/*.whl | head -1)
        pip install "$wheel_file"
        python -c "import tarzi; print('Wheel installed successfully')"

    - name: Upload wheels as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}
        path: dist/

  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev pkg-config
        
    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install openssl pkg-config

    - name: Set up uv
      uses: astral-sh/setup-uv@v3

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable

    - name: Create virtual environment and install dependencies
      shell: bash
      run: |
        uv --version
        uv sync --extra dev || uv sync
        uv pip install maturin
        uv pip install -r docs/requirements.txt

    - name: Build Python extension for docs
      shell: bash
      run: |
        uv run maturin develop --release

    - name: Build documentation
      shell: bash
      run: |
        cd docs
        make html

    - name: Upload documentation
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/_build/html/
