name: Rust CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  check:
    name: Check and Format
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-dev python3-pip

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Check code
      run: make format-check-rust lint-rust

  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.10']
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up Python environment for PyO3
      run: |
        PYTHON_BIN=$(which python${{ matrix.python-version }})
        PYTHON_LIBDIR=$($PYTHON_BIN -c "import sysconfig; print(sysconfig.get_config_var('LIBDIR'))")
        echo "PYO3_PYTHON=$PYTHON_BIN" >> $GITHUB_ENV
        echo "PYTHON_LIBDIR=$PYTHON_LIBDIR" >> $GITHUB_ENV

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Run unit tests
      run: RUSTFLAGS="-L$PYTHON_LIBDIR -lpython${{ matrix.python-version }}" cargo test --lib --all-features

    - name: Run doctests
      run: RUSTFLAGS="-L$PYTHON_LIBDIR -lpython${{ matrix.python-version }}" cargo test --doc --all-features

  build:
    name: Build Release on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: [check, test]
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.10']
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Required environment variables for PyO3
      run: |
        PYTHON_BIN=$(which python${{ matrix.python-version }})
        PYTHON_LIBDIR=$($PYTHON_BIN -c "import sysconfig; print(sysconfig.get_config_var('LIBDIR'))")
        echo "PYO3_PYTHON=$PYTHON_BIN" >> $GITHUB_ENV
        echo "PYTHON_LIBDIR=$PYTHON_LIBDIR" >> $GITHUB_ENV

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Build release binary
      run: RUSTFLAGS="-L$PYTHON_LIBDIR -lpython${{ matrix.python-version }}" cargo build --release --all-features

    - name: Build with Python bindings
      run: RUSTFLAGS="-L$PYTHON_LIBDIR -lpython${{ matrix.python-version }}" cargo build --release --features pyo3

    - name: Test binary works
      run: ./target/release/tarzi --version

    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: tarzi-binary-${{ runner.os }}
        path: target/release/tarzi
