name: Rust CI

on:
  push:
    branches: [ main, feat/*, feature/* ]
  pull_request:
    branches: [ main, feat/*, feature/* ]

env:
  CARGO_TERM_COLOR: always

jobs:
  check:
    name: Check and Format
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-dev python3-pip

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Check code
      run: cargo check --all-targets --all-features

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        
    steps:
    - uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo apt-get update
          sudo apt-get install -y python3-dev python3-pip
        elif [ "$RUNNER_OS" == "macOS" ]; then
          brew install python@3.11
          # Set up Python environment for PyO3
          PYTHON_PREFIX=$(brew --prefix python@3.11)
          PYTHON_BIN="$PYTHON_PREFIX/bin/python3.11"
          echo "PYO3_PYTHON=$PYTHON_BIN" >> $GITHUB_ENV
          
          # Use Python to get the correct library configuration
          PYTHON_LIBDIR=$($PYTHON_BIN -c "import sysconfig; print(sysconfig.get_config_var('LIBDIR'))")
          PYTHON_LDLIBRARY=$($PYTHON_BIN -c "import sysconfig; print(sysconfig.get_config_var('LDLIBRARY'))")
          
          echo "PYTHON_LIB_DIR=$PYTHON_LIBDIR" >> $GITHUB_ENV
          echo "PYTHON_LDLIBRARY=$PYTHON_LDLIBRARY" >> $GITHUB_ENV
          
          # Debug: Print the paths we found
          echo "Python library directory: $PYTHON_LIBDIR"
          echo "Python library name: $PYTHON_LDLIBRARY"
          ls -la "$PYTHON_LIBDIR" || echo "Directory not found: $PYTHON_LIBDIR"
        fi
      shell: bash

    - name: Set PyO3 environment variables (macOS)
      if: runner.os == 'macOS'
      run: |
        # Extract library name without 'lib' prefix and file extension
        LIBNAME=$(echo "$PYTHON_LDLIBRARY" | sed 's/^lib//' | sed 's/\.[^.]*$//')
        echo "RUSTFLAGS=-L$PYTHON_LIB_DIR -l$LIBNAME" >> $GITHUB_ENV
        echo "Using RUSTFLAGS: -L$PYTHON_LIB_DIR -l$LIBNAME"
      shell: bash

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Run unit tests
      run: cargo test --lib --all-features

    - name: Run integration tests
      run: cargo test --test '*' --all-features
      continue-on-error: true

    - name: Run doctests
      run: cargo test --doc --all-features

  build:
    name: Build Release
    runs-on: ubuntu-latest
    needs: [check, test]
    steps:
    - uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-dev python3-pip

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Build release binary
      run: cargo build --release --all-features

    - name: Build with Python bindings
      run: cargo build --release --features pyo3

    - name: Test binary works
      run: ./target/release/tarzi --version

    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: tarzi-binary-${{ runner.os }}
        path: target/release/tarzi 